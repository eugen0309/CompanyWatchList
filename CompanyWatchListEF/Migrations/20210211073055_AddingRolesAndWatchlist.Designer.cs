// <auto-generated />
using System;
using CompanyWatchListEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompanyWatchListCore.Migrations
{
    [DbContext(typeof(CompanyWatchlistContext))]
    [Migration("20210211073055_AddingRolesAndWatchlist")]
    partial class AddingRolesAndWatchlist
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12");

            modelBuilder.Entity("CompanyWatchListEF.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CompanyWatchListEF.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "98566893-4561-4098-bdb7-ae2cb177c650",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "2b579ea8-6204-43ac-b8a9-d423770dbd25",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("CompanyWatchListEF.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Eugen",
                            LastName = "Stancioiu",
                            PasswordHash = new byte[] { 52, 223, 125, 102, 8, 60, 231, 204, 180, 146, 188, 99, 176, 43, 247, 37, 37, 136, 140, 65, 254, 239, 11, 118, 190, 194, 130, 198, 107, 11, 173, 236, 47, 32, 135, 100, 252, 252, 77, 76, 132, 118, 66, 242, 216, 203, 229, 197, 13, 48, 148, 4, 152, 90, 117, 67, 159, 217, 101, 252, 152, 152, 241, 131 },
                            PasswordSalt = new byte[] { 252, 36, 215, 78, 58, 165, 144, 216, 252, 170, 96, 174, 14, 68, 127, 89, 236, 249, 36, 205, 172, 231, 123, 213, 84, 60, 232, 137, 171, 87, 103, 149, 6, 80, 22, 127, 44, 79, 45, 133, 160, 136, 254, 38, 190, 27, 228, 30, 159, 96, 32, 205, 67, 11, 89, 59, 10, 89, 240, 12, 43, 9, 205, 197, 31, 120, 29, 240, 122, 140, 126, 104, 174, 81, 236, 40, 224, 76, 255, 171, 118, 252, 239, 241, 142, 221, 191, 17, 124, 149, 225, 143, 85, 199, 171, 81, 164, 169, 171, 12, 174, 189, 218, 221, 245, 188, 191, 22, 154, 251, 66, 84, 49, 14, 210, 235, 140, 150, 253, 59, 43, 226, 200, 165, 224, 206, 167, 131 },
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("CompanyWatchListEF.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("CompanyWatchListEF.Entities.UserWatchlist", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("UserWatchlists");
                });

            modelBuilder.Entity("CompanyWatchListEF.Entities.UserRole", b =>
                {
                    b.HasOne("CompanyWatchListEF.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyWatchListEF.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyWatchListEF.Entities.UserWatchlist", b =>
                {
                    b.HasOne("CompanyWatchListEF.Entities.Company", "Company")
                        .WithMany("UserWatchlist")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyWatchListEF.Entities.User", "User")
                        .WithMany("UserWatchlist")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
