// <auto-generated />
using System;
using CompanyWatchListEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompanyWatchListCore.Migrations
{
    [DbContext(typeof(CompanyWatchlistContext))]
    partial class CompanyWatchlistContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12");

            modelBuilder.Entity("CompanyWatchListEF.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CompanyWatchListEF.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "2921fced-95aa-456e-b471-492e151e11b9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "ac29b737-4834-4dc5-a915-703955cc223c",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("CompanyWatchListEF.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Eugen",
                            LastName = "Stancioiu",
                            PasswordHash = new byte[] { 2, 147, 212, 4, 118, 43, 75, 64, 8, 12, 229, 211, 56, 99, 59, 16, 88, 118, 208, 43, 216, 19, 168, 39, 175, 237, 44, 184, 140, 177, 238, 171, 235, 21, 36, 245, 241, 78, 106, 44, 43, 61, 19, 112, 255, 163, 57, 246, 159, 75, 136, 26, 243, 170, 201, 31, 126, 42, 89, 7, 203, 22, 132, 128 },
                            PasswordSalt = new byte[] { 12, 153, 20, 134, 170, 171, 165, 140, 20, 130, 125, 143, 140, 21, 46, 109, 160, 214, 38, 162, 239, 176, 41, 185, 177, 251, 151, 69, 219, 219, 60, 41, 170, 152, 207, 251, 56, 70, 230, 216, 162, 4, 112, 110, 223, 111, 1, 101, 255, 219, 199, 17, 76, 250, 253, 104, 209, 67, 190, 92, 14, 165, 66, 176, 97, 124, 83, 173, 84, 28, 152, 81, 214, 214, 8, 27, 140, 71, 168, 23, 48, 102, 80, 97, 167, 49, 211, 119, 229, 247, 84, 234, 233, 247, 224, 171, 74, 216, 6, 248, 236, 249, 185, 160, 48, 95, 250, 44, 112, 16, 51, 17, 213, 91, 189, 175, 93, 154, 131, 248, 36, 153, 134, 35, 158, 144, 16, 124 },
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("CompanyWatchListEF.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("CompanyWatchListEF.Entities.UserWatchlist", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("UserWatchlists");
                });

            modelBuilder.Entity("CompanyWatchListEF.Entities.UserRole", b =>
                {
                    b.HasOne("CompanyWatchListEF.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyWatchListEF.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyWatchListEF.Entities.UserWatchlist", b =>
                {
                    b.HasOne("CompanyWatchListEF.Entities.Company", "Company")
                        .WithMany("UserWatchlist")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyWatchListEF.Entities.User", "User")
                        .WithMany("UserWatchlist")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
